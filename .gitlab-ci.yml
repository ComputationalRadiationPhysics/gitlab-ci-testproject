
include:
  - local: '/share/ci/compiler_clang.yml'
  - local: '/share/ci/compiler_gcc.yml'
  - local: '/share/ci/compiler_nvcc_cuda.yml'
  - local: '/share/ci/compiler_clang_cuda.yml'

stages:
  - rebase
  - generate
  - compile
  - status

# hidden base job to generate the test matrix
# required variables (space separated lists):
#   PIC_INPUTS - path to examples relative to share/picongpu
#                e.g. 
#                    "examples" starts one gitlab job per director in `examples/*`
#                    "examples/" compile all directories in `examples/*` within one gitlab job
#                    "examples/KelvinHelmholtz" compile all cases within one gitlab job
#   GITLAB_BASES   - name of the hidden gitlab base job desctption `/share/ci/compiler_*`
#   CXX_VERSIONS   - name of the compiler to use see `/share/ci/compiler_*` `e.g. "g++-8 g++-6"
#   BOOST_VERSIONS - boost version to check e.g. "1.70.0"
#                    supported version: {1.65.1, 1.66.0, 1.67.0, 1.68.0, 1.69.0, 1.70.0, 1.71.0, 1.72.0, 1.73.0}
#   PIC_ACCS       - PIConGPU backend names see `pic-build --help`
#                    e.g. "cuda cuda:35 serial"
.base_generator:
  stage: generate
  script:
    - $CI_PROJECT_DIR/share/ci/git_rebase.sh
    - $CI_PROJECT_DIR/share/ci/generate.sh > compile.yml
    - cat compile.yml
  artifacts:
    paths:
      - compile.yml

.base_generator_pairwise:
  stage: generate
  script:
    - apt update
    - apt install -y python3-pip
    - pip3 install allpairspy
    - $CI_PROJECT_DIR/share/ci/git_rebase.sh
    - $CI_PROJECT_DIR/share/ci/generate_pairwise.sh -n 1 > compile.yml
    - cat compile.yml
  artifacts:
    paths:
      - compile.yml

.base_nightly:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMPLEXITY == "nightly"'

test-rebase-to-mainline:
  stage: rebase
  script:
    - source $CI_PROJECT_DIR/share/ci/git_rebase.sh

matrix-pair:
  variables:
    PIC_INPUTS: "examples"
  extends: ".base_generator_pairwise"

compile-matrix-pair:
  stage: compile
  trigger:
    include:
      - artifact: compile.yml
        job: matrix-pair
    strategy: depend

# gcc matrix
# test simples setup to cover compatibility issues with boost
matrix-gcc-simple:
  variables:
    PIC_INPUTS: "examples/Empty"
    GITLAB_BASES: ".base_gcc"
    CXX_VERSIONS: "g++-9"
    BOOST_VERSIONS: "1.65.1"
    PIC_ACCS: "omp2b"
  extends: ".base_generator"

compile-matrix-gcc-simple:
  stage: compile
  trigger:
    include:
      - artifact: compile.yml
        job: matrix-gcc-simple
    strategy: depend

# clang matrix
# test simples setup to cover compatibility issues with boost
matrix-clang-simple:
  variables:
    PIC_INPUTS: "examples/Empty"
    GITLAB_BASES: ".base_clang"
    CXX_VERSIONS: "clang++-5.0"
    BOOST_VERSIONS: "1.65.1"
    PIC_ACCS: "omp2b"
  extends: ".base_generator"

compile-matrix-clang-simple:
  stage: compile
  trigger:
    include:
      - artifact: compile.yml
        job: matrix-clang-simple
    strategy: depend


status-check:
  stage: status
  script:
    - echo "Wait for previous stages"
  dependencies:
    - compile-matrix-clang-simple
    - compile-matrix-gcc-simple
    - compile-matrix-pair

# nightly build
matrix-gcc-simple-nightly:
  variables:
    PIC_INPUTS: "examples/Empty"
    GITLAB_BASES: ".base_gcc"
    CXX_VERSIONS: "g++-9"
    BOOST_VERSIONS: "1.65.1"
    PIC_ACCS: "omp2b"
  extends:
    - .base_generator
    - .base_nightly

compile-matrix-gcc-simple-nightly:
  stage: compile
  trigger:
    include:
      - artifact: compile.yml
        job: matrix-gcc-simple-nightly
    strategy: depend
  extends:
    - .base_nightly
